import subprocess
import sys
import os
import re

# --- Fun√ß√µes Utilit√°rias ---

def executar_comando(comando, descricao, suprimir_saida=False):
    """Executa um comando no terminal, com mensagens de status claras."""
    try:
        print(f"‚ñ∂Ô∏è  Executando: {' '.join(comando)}")
        # Op√ß√£o para esconder a sa√≠da de comandos menos importantes
        stdout_pipe = subprocess.DEVNULL if suprimir_saida else None
        stderr_pipe = subprocess.DEVNULL if suprimir_saida else None
        
        subprocess.check_call(comando, stdout=stdout_pipe, stderr=stderr_pipe)
        print(f"‚úÖ  {descricao}\n")
        return True
    except subprocess.CalledProcessError as e:
        # Se falhar, tenta rodar de novo sem suprimir a sa√≠da para o usu√°rio ver o erro
        print(f"‚ö†Ô∏è  Comando falhou. Tentando novamente com sa√≠da detalhada...")
        try:
            subprocess.check_call(comando)
        except subprocess.CalledProcessError as detailed_e:
            print(f"‚ùå  ERRO DETALHADO ao executar '{' '.join(comando)}'. C√≥digo de erro: {detailed_e.returncode}")
        return False
    except FileNotFoundError:
        print(f"‚ùå  ERRO: O comando '{comando[0]}' n√£o foi encontrado.")
        return False

def garantir_pipreqs():
    """Verifica se o pipreqs est√° instalado e, se n√£o, o instala."""
    print("[PASSO 1/5] Verificando a ferramenta 'pipreqs'...")
    try:
        executar_comando([sys.executable, "-m", "pipreqs.pipreqs", "--version"], "Pipreqs j√° est√° instalado.", suprimir_saida=True)
    except subprocess.CalledProcessError:
        print("üü°  'pipreqs' n√£o encontrado. Instalando...")
        if not executar_comando([sys.executable, "-m", "pip", "install", "pipreqs"], "'pipreqs' instalado."):
            return False
    return True

# --- Fun√ß√µes do Processo Principal ---

def gerar_lista_base_de_pacotes(temp_file="requirements.tmp"):
    """Usa pipreqs para gerar uma lista de pacotes base."""
    print(f"[PASSO 2/5] Detectando bibliotecas nos arquivos .py...")
    comando = ["pipreqs", ".", "--force", "--savepath", temp_file, "--encoding=utf-8"]
    return executar_comando(comando, f"Lista de pacotes base gerada em '{temp_file}'.")

def extrair_nomes_dos_pacotes(temp_file="requirements.tmp"):
    """L√™ o arquivo tempor√°rio e extrai apenas os nomes dos pacotes, sem vers√µes."""
    print(f"[PASSO 3/5] Extraindo nomes dos pacotes para resolu√ß√£o...")
    if not os.path.exists(temp_file):
        print(f"‚ùå ERRO: Arquivo tempor√°rio '{temp_file}' n√£o encontrado.")
        return None
    
    nomes_pacotes = []
    with open(temp_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                # Usa regex para pegar apenas o nome do pacote antes de qualquer comparador
                match = re.match(r'^[a-zA-Z0-9_.-]+', line)
                if match:
                    nomes_pacotes.append(match.group(0))
    
    os.remove(temp_file) # Limpa o arquivo tempor√°rio
    print(f"‚úÖ  Nomes de pacotes extra√≠dos: {', '.join(nomes_pacotes)}\n")
    return nomes_pacotes

def instalar_com_resolucao(nomes_pacotes):
    """Instala pacotes a partir de uma lista de nomes, deixando o pip resolver as vers√µes."""
    print(f"[PASSO 4/5] Instalando pacotes com resolu√ß√£o autom√°tica de conflitos...")
    if not nomes_pacotes:
        print("üü°  Nenhum pacote para instalar.")
        return True
    
    comando = [sys.executable, "-m", "pip", "install"] + nomes_pacotes
    return executar_comando(comando, "Depend√™ncias instaladas com sucesso.")

def congelar_ambiente(lock_file="requirements_lock.txt"):
    """Salva as vers√µes exatas do ambiente funcional em um arquivo de 'lock'."""
    print(f"[PASSO 5/5] Salvando ambiente funcional em '{lock_file}'...")
    with open(lock_file, 'w', encoding='utf-8') as f:
        comando = [sys.executable, "-m", "pip", "freeze"]
        # Redireciona a sa√≠da do comando para o arquivo
        subprocess.call(comando, stdout=f)
    print(f"‚úÖ  Ambiente 'travado' com sucesso em '{lock_file}'.\n")

def executar_passos_pos_instalacao(lock_file="requirements_lock.txt"):
    """Executa a√ß√µes adicionais para pacotes espec√≠ficos."""
    if not os.path.exists(lock_file): return

    with open(lock_file, 'r', encoding='utf-8') as f:
        conteudo_lock = f.read().lower()

    if "playwright" in conteudo_lock:
        executar_comando([sys.executable, "-m", "playwright", "install"], "Navegadores do Playwright baixados.")
    
    if "pytesseract" in conteudo_lock:
        print("\n" + "="*50)
        print("‚ö†Ô∏è  AVISO MUITO IMPORTANTE SOBRE O PYTESSERACT ‚ö†Ô∏è")
        print("Lembre-se que 'pytesseract' precisa do programa Tesseract-OCR instalado no seu computador.")
        print("Este script N√ÉO instala o programa. Baixe-o em:")
        print("https://github.com/UB-Mannheim/tesseract/wiki")
        print("="*50)


# --- FLUXO DE EXECU√á√ÉO ---

if __name__ == "__main__":
    print("======================================================")
    print("  INSTALADOR 100% AUTOM√ÅTICO DE AMBIENTE PYTHON       ")
    print("======================================================")

    if garantir_pipreqs():
        if gerar_lista_base_de_pacotes():
            nomes_pacotes = extrair_nomes_dos_pacotes()
            if nomes_pacotes is not None and instalar_com_resolucao(nomes_pacotes):
                congelar_ambiente()
                executar_passos_pos_instalacao()
                print("\nüéâüéâüéâ SUCESSO! O ambiente est√° pronto para uso. üéâüéâüéâ")
            else:
                print("\nüö® FALHA: N√£o foi poss√≠vel instalar as depend√™ncias.")
        else:
            print("\nüö® FALHA: N√£o foi poss√≠vel gerar a lista de depend√™ncias.")
    
    input("\nPressione Enter para sair.")